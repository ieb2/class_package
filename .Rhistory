}
data.frame(diff) %>%
ggplot2::ggplot(
.,
aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
wide_data <- data.frame("measure_1" = rnorm(500,0,1),
"measure_2" = rnorm(500,1,1),
"random_var" = runinf(500))
wide_data <- data.frame("measure_1" = rnorm(500,0,1),
"measure_2" = rnorm(500,1,1),
"random_var" = runif(500))
wide_data
long_data <- data.frame("time_of_measurement" = rep(c("first", "later"), each = 500))
long_data
long_data <- data.frame("time_of_measurement" = rep(c("first", "later"),
each = 500),
"measurement" = c(rnorm(500,0,1), rnorm(500,1,1)))
long_data
dependent_qq_plot(data = wide_data, variable = "measure",
first_group = "measure_1", second_group = "measure_2")
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
library(magrittr)
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
library(tidyverse)
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
wide_data <- data.frame("measure_1" = rnorm(500,0,1),
"measure_2" = rnorm(500,1,1),
"random_var" = runif(500))
long_data <- data.frame("time_of_measurement" = rep(c("first", "later"),
each = 500),
"measurement" = c(rnorm(500,0,1), rnorm(500,1,1)))
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
dependent_qq_plot(data = long_data, variable = "measurement",
grouping_variable = "time_of_measurement",
first_group = "first", second_group = "later")
wide_data <- data.frame("group_1" = rnorm(500,0,1),
"group_2" = rnorm(500,1,1),
"random_var" = runif(500))
long_data <- data.frame("group" = rep(c("group_a", "group_b"),
each = 500),
"measurement" = c(rnorm(500,0,1), rnorm(500,1,1)))
independent_qq_plot(data = wide_data, variable = "test_score",
grouping_variable = "crazy_var", c("group_1", "group_2"))
independent_qq_plot(data = long_data, variable = "measurement",
grouping_variable = "group")
one_qq_plot(wide_data, "random_var")
wide_data <- data.frame("group_1" = rnorm(50000,0,1),
"group_2" = rnorm(50000,1,1),
"random_var" = runif(50000))
one_qq_plot(wide_data, "random_var")
one_qq_plot(wide_data, "group_1")
wide_data
independent_qq_plot(wide_data, "A1C", "Time of Measurement", c("group_1", "group_2"))
independent_qq_plot(wide_data, "A1C", "Time of Measurement", c("group_1", "group_2"))
roxygen2::roxygenise()
roxygen2::roxygenise()
#' ***_qq_plot
#'
#' Constructs QQ plots for dependent and independet t-tests, and for single vectors.
#'
#' @import ggplot2
#' @import ggpubr
#' @import magrittr
#'
#' @param data Data in either long or wide format.
#' @param variable The variable for which the QQ plot is being constructed.
#' For wide datasets, this alters the titles of the QQ plot.
#' @param grouping_variable The variable that contains the grouping indicator for data in long format.
#' For data in wide format, this only alters the titles of the QQ plot.
#' @param first_group The variable from which the other is subtracted. For data in
#' long format, this is the level of the grouping variable we would like to be first.
#' For data in wide format, this is the column's name containing the first set of measurements.
#' @param second_group Analogous to first_group.
#' @param ... For data in wide format, a character vector containing the column names of the measurements must be supplied.
#' @return Graphic object
#' @examples
NULL
##' @rdname one_qq_plot
##' @examples
##' one_qq_plot(penguins, "bill_length_mm") # Names must be supplied as strings.
##' @export
one_qq_plot <-
function(data, variable) {
ggplot2::ggplot(data, ggplot2::aes()(sample = get(variable))) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0("QQ Plot for ",
sep = "",
variable
))
}
# For wide_data, supply column names of groups in a vector
independent_qq_plot <-
function(data, variable, grouping_variable, ...) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% ...)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
qq_1 <-
ggplot2::ggplot(
split_dfs[[1]],
ggplot2::aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[1]]
))
qq_2 <-
ggplot2::ggplot(
split_dfs[[2]],
ggplot2::aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[2]]
))
ggpubr::ggarrange(qq_1, qq_2)
}
# For wide_data, first_group and second_group are the respective column names
dependent_qq_plot <-
function(data, variable, grouping_variable, first_group, second_group) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- first_group_df[[1]][[variable]] - second_group_df[[1]][[variable]]
if (first_group_df[[1]][[grouping_variable]][[1]] != first_group) {
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if (second_group_df[[1]][[grouping_variable]][[1]] != second_group) {
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
ggplot2::aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
roxygen2::roxygenise()
roxygen2::roxygenize()
roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
styler:::style_active_file()
roxygen2::roxygenise()
styler:::style_active_file()
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise()
load("~/classpackage/R/normality_and_correlation.R")
library(tidyverse)
library(palmerpenguins)
### DRAFT ###
method <- "pearson"
data <- drop_na(penguins)
numeric_subset <- data[sapply(data, is.numeric)]
corr_mat <- cor(numeric_subset, method = method) %>% round(.,3)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
corr_mat
normality_res
#'
#' @import ggplot2
#' @import ggpubr
#' @import magrittr
#'
#' @param data Data in either long or wide format.
#' @param variable The variable for which the QQ plot is being constructed.
#' @return Graphic object
#' @examples
#' one_qq_plot(penguins, "bill_length_mm")
one_qq_plot <-
function(data, variable) {
ggplot2::ggplot(data, ggplot2::aes(sample = get(variable))) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0("QQ Plot for ",
sep = "",
variable
))
}
one_qq_plot(data, "bill_length_mm")
one_qq_plot(data, colname(numeric_subset)[[1]])
one_qq_plot(data, colnames(numeric_subset)[[1]])
numeric_subset_names <- colnames(numeric_subset)
numeric_subset_names
length_numeric_colnames <- length(numeric_subset_names)
length_numeric_colnames
seq_along(length_numeric_colnames)
seq_len(length_numeric_colnames)
map(seq_len(length_numeric_colnames), ~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
ggarrange(qq_plots)
qq_plots <- map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
ggarrange(qq_plots)
ggpubr::ggarrange(qq_plots)
ggpubr::ggarrange(plotlist = qq_plots, ncol=cols, nrow = rows)
ggpubr::ggarrange(plotlist = qq_plots, ncol=1, nrow = 1)
ggpubr::ggarrange(plotlist = qq_plots, ncol=5, nrow = 5)
x = length(qq_plots)
cols = round(sqrt(x),0)
rows = ceiling(x/cols)
cols
rows
normal_correlation <- function(data, method, desired_object){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
}
normal_correlation <- function(data, method, desired_object){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
if(desired_object == "correlation matrix"){return(corr_mat)}
else if(desired_object == "qq plots"){return(qq_plots_out)}
else if(desired_object == "normality test"){return(normality_res)}
else {stop("Invalid desired object supplied.")}
}
normal_correlation(penguins)
normal_correlation <- function(data, method, desired_object){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
if(desired_object == "correlation matrix"){return(corr_mat)}
else if(desired_object == "qq plots"){return(qq_plots_out)}
else if(desired_object == "normality test"){return(normality_res)}
else {stop("Invalid desired object supplied.")}
}
normal_correlation(penguins)
normal_correlation(penguins, "howdl")
normal_correlation(penguins, method = "pearson", desired_object = "qq plots")
normal_correlation(penguins, method = "pearson", desired_object = "normality test")
normal_correlation(penguins, method = "pearson", desired_object = "correlation matrix")
normal_correlation <- function(data, method){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
out_list <- list(normality_res, corr_mat, qq_plots_out)
return(out_list)
}
normal_correlation(penguins, "pearson")
example_output <- normal_correlation(penguins, "pearson")
View(example_output)
out_list <- list(qqq = normality_res, ppp = corr_mat, qq_plots_out)
normal_correlation <- function(data, method){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
out_list <- list(qqq = normality_res, ppp = corr_mat, qq_plots_out)
return(out_list)
}
example_output <- normal_correlation(penguins, "pearson")
View(example_output)
normal_correlation <- function(data, method){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
out_list <- list("Normality Test" = normality_res,
"Correlation Matrix" = corr_mat,
"QQ Plots" = qq_plots_out)
return(out_list)
}
example_output <- normal_correlation(penguins, "pearson")
View(example_output)
normal_correlation <- function(data, method){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
out_list <- list("Normality Test" = normality_res,
"Correlation Matrix" = corr_mat,
"QQ Plots" = qq_plots_out)
return(out_list)
}
example_output <- normal_correlation(penguins, "pearson")
View(example_output)
example_output[["QQ Plots"]]
normal_correlation <- function(data, method){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
out_list <- list("Normality Test" = normality_res,
"Correlation Matrix" = corr_mat,
"QQ Plots" = qq_plots_out)
return(out_list)
}
datasets::USJudgeRatings
datasets::cars
datasets::infert
datasets::sleep
datasets::women
datasets::women
datasets::VADeaths
datasets::AirPassengers
datasets::ChickWeight
normal_correlation <- function(data, method){
numeric_subset <- data[sapply(data, is.numeric)]
length_numeric_colnames <- length(colnames(numeric_subset))
qq_plots_list <- purrr::map(seq_len(length_numeric_colnames),
~one_qq_plot(numeric_subset, numeric_subset_names[[.x]]))
# In order to determine ideal qq plot layout
cols <- round(sqrt(length(qq_plots)),0)
rows <- ceiling(length(qq_plots)/cols)
qq_plots_out <-
ggpubr::ggarrange(plotlist = qq_plots_list, ncol = cols, nrow = rows)
corr_mat <- cor(numeric_subset, method = method)
normality_res <- lapply(numeric_subset, shapiro.test) %>%
do.call(rbind, .) %>%
data.frame() %>%
tibble::rownames_to_column("Variable") %>%
dplyr::select(-c(method, `data.name`)) %>%
dplyr::rename("Test Statistic" = "statistic", "p-value" = "p.value")
out_list <- list("Normality Test" = normality_res,
"Correlation Matrix" = corr_mat,
"QQ Plots" = qq_plots_out)
return(out_list)
}
