ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
dependent_qq_plot(data, variable="spending",
first_group = "y2000",
second_group = "y2005")
dependent_qq_plot <-
function(data, variable, grouping_variable, first_group, second_group) {
grouping_variable <- ifelse(missing(grouping_variable), "random", grouping_variable)
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(!!rlang::sym(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- as.numeric(first_group_df[[1]][[variable]]) - as.numeric(second_group_df[[1]][[variable]])
if (first_group_df[[1]][[grouping_variable]][[1]] != first_group) {
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if (second_group_df[[1]][[grouping_variable]][[1]] != second_group) {
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
ggplot2::aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
dependent_qq_plot(data, variable="spending",
first_group = "y2000",
second_group = "y2005")
dependent_qq_plot(data, variable="spending",
first_group = "y2000",
second_group = "y2005")
dependent_qq_plot(data, variable="spending",
first_group = "y2000",
second_group = "y2005")
dependent_qq_plot(data, variable="spending",
grouping_variable = "howdy",
first_group = "y2000",
second_group = "y2005")
sim_data <- data.table(group = rep(c("a", "b"),100) m = rnorm(100))
rep(c("a", "b"),100)
sim_data <- data.table(group = rep(c("a", "b"),100), m = rnorm(100))
sim_data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(100))
sim_data
dependent_qq_plot(sim_data, variable = "m", grouping_variable = "group", first_group = "a", second_group = "b")
dependent_qq_plot(sim_data, variable = "m",
first_group = "a", second_group = "b")
dependent_qq_plot(sim_data, variable = "m",
first_group = "a", second_group = "b")
dependent_qq_plot <-
function(data, variable, grouping_variable, first_group, second_group) {
grouping_variable <- ifelse(missing(grouping_variable), "random", grouping_variable)
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(!!rlang::sym(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- as.numeric(first_group_df[[1]][[variable]]) - as.numeric(second_group_df[[1]][[variable]])
if (first_group_df[[1]][[grouping_variable]][[1]] != first_group) {
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if (second_group_df[[1]][[grouping_variable]][[1]] != second_group) {
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
ggplot2::aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
dependent_qq_plot(sim_data, variable = "m",
first_group = "a", second_group = "b")
dependent_qq_plot(sim_data, variable = "m", first_group = "a", second_group = "b")
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data
data <- sim_data
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data <- data
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data
variable = "m"
first_group = "a"
second_group = "b"
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data
variable
grouping_variable
grouping_variable %in% colnames(data)
data
grouping_variable
grouping_variable <- NULL
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
grouping_variable
grouping_variable <- ifelse(missing(grouping_variable), "random", grouping_variable)
data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(100))
dependent_qq_plot(data, variable = "m", first_group = "a", second_group = "b")
dependent_qq_plot(data, variable = "m", first_group = "a", second_group = "b", grouping_variable = "")
dependent_qq_plot(data, variable = "m", first_group = "a", second_group = "b", grouping_variable = "sd")
dependent_qq_plot(data, variable = "m", first_group = "a", second_group = "b", grouping_variable = "123")
data
classpackage::dependent_qq_plot(data, variable = "m", first_group = "a", second_group = "b", grouping_variable = "123")
dependent_qq_plot(data, variable = "m", first_group = "a", second_group = "b",
grouping_variable = "123")
grouping_variable
data
!(grouping_variable %in% colnames(data))
grouping_variable %in% colnames(data)
grouping_variable <- "r"
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data
data
data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(100))
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data
tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character)
data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(100))
tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character)
tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character)
data <- tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
data <- tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[["grouping_variable"]] %in% c(first_group, second_group))
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[["grouping_variable"]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data
grouping_variable
data
data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(100))
tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character)
first_group
second_group
tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[["grouping_variable"]] %in% c(first_group, second_group))
tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character)
tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[["grouping_variable"]])
tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character) %>%
dplyr::select("grouping_variable")
tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character) %>%
dplyr::filter("grouping_variable"%in% c(first_group, second_group))
c(first_group, second_group)
q <- tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character)
q
q$grouping_variable == "a"
q$value == "a"
q
data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(100))
data
q <- tidyr::pivot_longer(data, names_to = "grouping_variable", cols = everything(),
values_transform = as.character)
q
data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(100))
data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(200))
data
dependent_qq_plot(data, variable = "m", grouping_variable = "group",
first_group = "a", second_group = "b")
data <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1ByIX8wOJKk-CjtJ6XJcg1JyxJN6cJSWbvx6vxNoviDs/edit#gid=0")
data
dependent_qq_plot(data, variable = "m",
first_group = "y2000", second_group = "y2005")
dependent_qq_plot(palmerpenguins::penguins, variable = "bill_length_mm",
grouping_variable = "sex", first_group = "male",
second_group = "female")
dependent_qq_plot(na.omit(palmerpenguins::penguins), variable = "bill_length_mm",
grouping_variable = "sex", first_group = "male",
second_group = "female")
dependent_qq_plot(na.omit(palmerpenguins::penguins), variable = "bill_length_mm", first_group = "male",
second_group = "female")
dependent_qq_plot(data, variable = "m", first_group = "y2000", second_group = "y2005")
wide_data
# Wide data from example
wide_data <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1ByIX8wOJKk-CjtJ6XJcg1JyxJN6cJSWbvx6vxNoviDs/edit#gid=0")
wide_data
data %>%
dependent_qq_plot(variable = "spending",
grouping_variable = " ",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously, but grouping_variable removed
data %>%
dependent_qq_plot(variable = "spending",
first_group = "y2010",
second_group = "y2015")
long_data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(200))
wide_data %>%
dependent_qq_plot(variable = "spending",
grouping_variable = " ",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously, but grouping_variable removed
wide_data %>%
dependent_qq_plot(variable = "spending",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously
wide_data %>%
dependent_qq_plot(variable = "spending",
grouping_variable = " ",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously, but grouping_variable removed
wide_data %>%
dependent_qq_plot(variable = "spending",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously, but grouping_variable removed
wide_data %>%
dependent_qq_plot(variable = "312",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously, but grouping_variable removed
wide_data %>%
dependent_qq_plot(variable = "spending",
first_group = "y2010",
second_group = "y2015")
long_data %>%
dependent_qq_plot(variable = "m",
grouping_variable = "group",
first_group = "a",
second_group = "b")
long_data %>%
dependent_qq_plot(variable = "m",
first_group = "a",
second_group = "b")
# Wide data from example
wide_data <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1ByIX8wOJKk-CjtJ6XJcg1JyxJN6cJSWbvx6vxNoviDs/edit#gid=0")
long_data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(200))
# What didn't work previously
wide_data %>%
dependent_qq_plot(variable = "spending",
grouping_variable = " ",
first_group = "y2010",
second_group = "y2015")
dependent_qq_plot <-
function(data, variable, grouping_variable, first_group, second_group) {
grouping_variable <- ifelse(missing(grouping_variable), "random", grouping_variable)
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything(),
values_transform = as.character) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(!!rlang::sym(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- as.numeric(first_group_df[[1]][[variable]]) - as.numeric(second_group_df[[1]][[variable]])
if (first_group_df[[1]][[grouping_variable]][[1]] != first_group) {
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if (second_group_df[[1]][[grouping_variable]][[1]] != second_group) {
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
ggplot2::aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
# What didn't work previously
wide_data %>%
dependent_qq_plot(variable = "spending",
grouping_variable = " ",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously, but grouping_variable removed
wide_data %>%
dependent_qq_plot(variable = "spending",
first_group = "y2010",
second_group = "y2015")
# Working example with long data
long_data %>%
dependent_qq_plot(variable = "m",
grouping_variable = "group",
first_group = "a",
second_group = "b")
# For long data, grouping variable is still required
long_data %>%
dependent_qq_plot(variable = "m",
first_group = "a",
second_group = "b")
library(gsheet)
library(tidyverse)
library(classpackage)
# Wide data from example
wide_data <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1ByIX8wOJKk-CjtJ6XJcg1JyxJN6cJSWbvx6vxNoviDs/edit#gid=0")
long_data <- data.frame(group = rep(c("a", "b"),100), m = rnorm(200))
# What didn't work previously
wide_data %>%
dependent_qq_plot(variable = "spending",
grouping_variable = " ",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously, but grouping_variable removed
wide_data %>%
dependent_qq_plot(variable = "spending",
first_group = "y2010",
second_group = "y2015")
# Working example with long data
long_data %>%
dependent_qq_plot(variable = "m",
grouping_variable = "group",
first_group = "a",
second_group = "b")
# For long data, grouping variable is still required
# doesn't work
long_data %>%
dependent_qq_plot(variable = "m",
first_group = "a",
second_group = "b")
roxygen2::roxygenise(clean=TRUE)
rm(list = c("dependent_qq_plot"))
roxygen2::roxygenise(clean=TRUE)
devtools::install_github("https://github.com/ieb2/class_package")
library(classpackage)
# What didn't work previously
wide_data %>%
classpackage::dependent_qq_plot(variable = "spending",
grouping_variable = " ",
first_group = "y2010",
second_group = "y2015")
# For long data, grouping variable is still required
# doesn't work
long_data %>%
classpackage::dependent_qq_plot(variable = "m",
first_group = "a",
second_group = "b")
# Working example with long data
long_data %>%
classpackage::dependent_qq_plot(variable = "m",
grouping_variable = "group",
first_group = "a",
second_group = "b")
# What didn't work previously, but grouping_variable removed
wide_data %>%
classpackage::dependent_qq_plot(variable = "spending",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously
wide_data %>%
classpackage::dependent_qq_plot(variable = "spending",
grouping_variable = " ",
first_group = "y2010",
second_group = "y2015")
# What didn't work previously, but grouping_variable removed
wide_data %>%
classpackage::dependent_qq_plot(variable = "spending",
first_group = "y2010",
second_group = "y2015")
