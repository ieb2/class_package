first_group, "-", second_group
))
}
# Long example
dependent_qq_plot(wide_data, "weight", "time", "before", "after")
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
grouping_variable
dependent_qq_plot(wide_data, "weight", "time", "before", "after")
dependent_qq_plot(drop_na(penguins), "bill_length_mm", "sex", "female", "male")
# Wide example
dependent_qq_plot(drop_na(penguins), "bill_depth_mm", "sex", "female", "male")
wide_data
# Long example
dependent_qq_plot(wide_data, "weight", "time", "before_test_score", "after_after_test_score")
library(tidyverse)
library(palmerpenguins)
wide_data <- data.frame(before_weight = rnorm(50, 0, 1),
after_weight = rnorm(50,1,1))
wide_data
long_data <- data.frame(time_point = rep(c("before", "after"), each = 50),
weight = c(rnorm(50, 0, 1), rnorm(50,1,1)))
long_data
# Long example
dependent_qq_plot(wide_data, variable = "weight", grouping_variabl = "time",
first_group = "before_weight",
second_group = "after_weight")
# Wide example
dependent_qq_plot(wide_data, variable = "weight", grouping_variable = "time",
first_group = "before_weight",
second_group = "after_weight")
dependent_qq_plot(long_data, variable = "weight", grouping_variable = "time_point",
first_group = "before", second_group = "after")
# Wide example
# variable and grouping_variable arguments are arbitrary, altough
dependent_qq_plot(wide_data, variable = "weight", grouping_variable = "time",
first_group = "before_weight",
second_group = "after_weight")
styler:::style_active_file()
wide_data
colnames(wide_data) <- c("first_group", "second_group")
# Long example
dependent_qq_plot(long_data, variable = "weight", grouping_variable = "time_point",
first_group = "before", second_group = "after")
wide_data
wide_data
!("time" %in% colnames(wide_data))
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything())
data
long_data
dependent_qq_plot(long_data, variable = "weight",
grouping_variable = "time_point",
first_group = "before",
after_group = "after")
dependent_qq_plot(long_data, variable = "weight",
grouping_variable = "time_point",
first_group = "before",
second_group = "after")
wide_data
wide_data <- data.frame(before_weight = rnorm(50, 0, 1),
after_weight = rnorm(50,1,1))
wide_data <- data.frame(before_weight = rnorm(50, 0, 1),
after_weight = rnorm(50,1,1),
random_var = runif(50))
wide_data
dependent_qq_plot(wide_data, variable = "weight",
grouping_variable = "time_point",
first_group = "before_weight",
second_group = "after_weight")
independent_qq_plot <- function(data, variable, grouping_variable, ...) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% ...)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
qq_1 <-
ggplot2::ggplot(
split_dfs[[1]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[1]]
))
qq_2 <-
ggplot2::ggplot(
split_dfs[[2]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[2]]
))
ggpubr::ggarrange(qq_1, qq_2)
}
grouping_variable
wide_data
# For wide_data, supply column names of groups in a vector
independent_qq_plot <- function(data, variable, grouping_variable, ...) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% ...)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
qq_1 <-
ggplot2::ggplot(
split_dfs[[1]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[1]]
))
qq_2 <-
ggplot2::ggplot(
split_dfs[[2]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[2]]
))
ggpubr::ggarrange(qq_1, qq_2)
}
wide_data
independent_qq_plot(wide_data, "weight", "time", c("before_weight", after_weight))
independent_qq_plot(wide_data, "weight", "time", c("before_weight", "after_weight"))
long_data
independent_qq_plot(long_data, "weight", "time_point")
independent_qq_plot(drop_na(penguins), "bill_depth_mm", "sex")
dependent_qq_plot(drop_na(penguins), "bill_depth_mm", "sex", "male", "female")
# Variables need to be supplied in quotations
one_qq_plot <-
function(data, variable) {
ggplot2::ggplot(data, aes(sample = get(variable))) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0("QQ Plot for ",
sep = "",
variable
))
}
# For wide_data, supply column names of groups in a vector
independent_qq_plot <-
function(data, variable, grouping_variable, ...) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% ...)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
qq_1 <-
ggplot2::ggplot(
split_dfs[[1]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[1]]
))
qq_2 <-
ggplot2::ggplot(
split_dfs[[2]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[2]]
))
ggpubr::ggarrange(qq_1, qq_2)
}
# For wide_data, first_group and second_group are the respective column names
dependent_qq_plot <-
function(data, variable, grouping_variable, first_group, second_group) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- first_group_df[[1]][[variable]] - second_group_df[[1]][[variable]]
if (first_group_df[[1]][[grouping_variable]][[1]] != first_group) {
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if (second_group_df[[1]][[grouping_variable]][[1]] != second_group) {
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
wide_data <- data.frame("measure_1" = rnorm(500,0,1),
"measure_2" = rnorm(500,1,1),
"random_var" = runinf(500))
wide_data <- data.frame("measure_1" = rnorm(500,0,1),
"measure_2" = rnorm(500,1,1),
"random_var" = runif(500))
wide_data
long_data <- data.frame("time_of_measurement" = rep(c("first", "later"), each = 500))
long_data
long_data <- data.frame("time_of_measurement" = rep(c("first", "later"),
each = 500),
"measurement" = c(rnorm(500,0,1), rnorm(500,1,1)))
long_data
dependent_qq_plot(data = wide_data, variable = "measure",
first_group = "measure_1", second_group = "measure_2")
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
library(magrittr)
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
library(tidyverse)
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
wide_data <- data.frame("measure_1" = rnorm(500,0,1),
"measure_2" = rnorm(500,1,1),
"random_var" = runif(500))
long_data <- data.frame("time_of_measurement" = rep(c("first", "later"),
each = 500),
"measurement" = c(rnorm(500,0,1), rnorm(500,1,1)))
dependent_qq_plot(data = wide_data, variable = "measure",
grouping_variable = "time_of_measurement",
first_group = "measure_1", second_group = "measure_2")
dependent_qq_plot(data = long_data, variable = "measurement",
grouping_variable = "time_of_measurement",
first_group = "first", second_group = "later")
wide_data <- data.frame("group_1" = rnorm(500,0,1),
"group_2" = rnorm(500,1,1),
"random_var" = runif(500))
long_data <- data.frame("group" = rep(c("group_a", "group_b"),
each = 500),
"measurement" = c(rnorm(500,0,1), rnorm(500,1,1)))
independent_qq_plot(data = wide_data, variable = "test_score",
grouping_variable = "crazy_var", c("group_1", "group_2"))
independent_qq_plot(data = long_data, variable = "measurement",
grouping_variable = "group")
one_qq_plot(wide_data, "random_var")
wide_data <- data.frame("group_1" = rnorm(50000,0,1),
"group_2" = rnorm(50000,1,1),
"random_var" = runif(50000))
one_qq_plot(wide_data, "random_var")
one_qq_plot(wide_data, "group_1")
wide_data
independent_qq_plot(wide_data, "A1C", "Time of Measurement", c("group_1", "group_2"))
independent_qq_plot(wide_data, "A1C", "Time of Measurement", c("group_1", "group_2"))
roxygen2::roxygenise()
roxygen2::roxygenise()
#' ***_qq_plot
#'
#' Constructs QQ plots for dependent and independet t-tests, and for single vectors.
#'
#' @import ggplot2
#' @import ggpubr
#' @import magrittr
#'
#' @param data Data in either long or wide format.
#' @param variable The variable for which the QQ plot is being constructed.
#' For wide datasets, this alters the titles of the QQ plot.
#' @param grouping_variable The variable that contains the grouping indicator for data in long format.
#' For data in wide format, this only alters the titles of the QQ plot.
#' @param first_group The variable from which the other is subtracted. For data in
#' long format, this is the level of the grouping variable we would like to be first.
#' For data in wide format, this is the column's name containing the first set of measurements.
#' @param second_group Analogous to first_group.
#' @param ... For data in wide format, a character vector containing the column names of the measurements must be supplied.
#' @return Graphic object
#' @examples
NULL
##' @rdname one_qq_plot
##' @examples
##' one_qq_plot(penguins, "bill_length_mm") # Names must be supplied as strings.
##' @export
one_qq_plot <-
function(data, variable) {
ggplot2::ggplot(data, ggplot2::aes()(sample = get(variable))) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0("QQ Plot for ",
sep = "",
variable
))
}
# For wide_data, supply column names of groups in a vector
independent_qq_plot <-
function(data, variable, grouping_variable, ...) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% ...)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
qq_1 <-
ggplot2::ggplot(
split_dfs[[1]],
ggplot2::aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[1]]
))
qq_2 <-
ggplot2::ggplot(
split_dfs[[2]],
ggplot2::aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[2]]
))
ggpubr::ggarrange(qq_1, qq_2)
}
# For wide_data, first_group and second_group are the respective column names
dependent_qq_plot <-
function(data, variable, grouping_variable, first_group, second_group) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- first_group_df[[1]][[variable]] - second_group_df[[1]][[variable]]
if (first_group_df[[1]][[grouping_variable]][[1]] != first_group) {
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if (second_group_df[[1]][[grouping_variable]][[1]] != second_group) {
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
ggplot2::aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
roxygen2::roxygenise()
roxygen2::roxygenize()
roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
styler:::style_active_file()
roxygen2::roxygenise()
styler:::style_active_file()
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise()
