sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- first_group_df[[1]][[variable]] - second_group_df[[1]][[variable]]
if(first_group_df[[1]][[grouping_variable]][[1]] != first_group){
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if(second_group_df[[1]][[grouping_variable]][[1]] != second_group){
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
dependent_qq_plot(data = long_data, variable = "variable",
grouping_variable = "group", first_group = "before",
second_group = "after")
library(tidyverse)
long_data <- data.frame(
group = rep(c("before", "after"), each = 500),
test_score = c(rnorm(500, 0,1), rnorm(500,1,1))
)
wide_data <- data.frame(before_test_score = rnorm(500, 0,1),
after_after_test_score = rnorm(500,1,1))
dependent_qq_plot(data = long_data, variable = "test_score",
grouping_variable = "group", first_group = "before",
second_group = "after")
dependent_qq_plot(data = wide_data, variable = "test_score",
grouping_variable = "group", first_group = "before",
second_group = "after")
wide_data
dependent_qq_plot(data = wide_data, variable = "test_score",
grouping_variable = "group", first_group = "before",
second_group = "after")
dependent_qq_plot(data = wide_data, variable = "test_score",
grouping_variable = "time", first_group = "before",
second_group = "after")
dependent_qq_plot(data = wide_data, variable = "test_score",
grouping_variable = "", first_group = "before_test_score",
second_group = "after_test_score")
dependent_qq_plot(data = wide_data, variable = "test_score",
grouping_variable = "time", first_group = "before_test_score",
second_group = "after_test_score")
after_after_test_score
wide_data <- data.frame(before_test_score = rnorm(500, 0,1),
after_after_test_score = rnorm(500,1,1))
wide_data
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything())
data
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(get(grouping_variable) == first_group | get(grouping_variable) == second_group)
data
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(time == first_group | time == second_group)
data
tidyr::pivot_longer(wide_data, names_to = "time", cols = everything())
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything())
data$time
data$time == before_test_score
data$time == "before_test_score"
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(time == get(first_group) | time == get(second_group) )
data
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(time == before_test_score | time == after_test_score )
first_group <- "before_test_score"
second_group <- "after_test_score"
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(time ==  get(first_group| time == second_group)
first_group <- "before_test_score"
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(time ==  get(first_group) | time == second_group)
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(time ==  get(first_group) | time == get(second_group))
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(time ==  get(first_group) | time == get(second_group))
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything()) %>%
dplyr::filter(time ==  first_group | time == second_group)
data
first_group <- "before_test_score"
second_group <- "after_test_score"
# Data has to be in long format.
dependent_qq_plot <- function(data, variable, grouping_variable, first_group, second_group) {
if(!(grouping_variable %in% colnames(data))){
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] == first_group | .[[grouping_variable]] == second_group)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- first_group_df[[1]][[variable]] - second_group_df[[1]][[variable]]
if(first_group_df[[1]][[grouping_variable]][[1]] != first_group){
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if(second_group_df[[1]][[grouping_variable]][[1]] != second_group){
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
wide_data <- data.frame(before_test_score = rnorm(500, 0,1),
after_after_test_score = rnorm(500,1,1))
# Wide example
dependent_qq_plot(drop_na(penguins), "bill_length_mm", "sex", "female", "male")
data <- tidyr::pivot_longer(wide_data, names_to = get(variable), cols = everything()) %>%
dplyr::filter(time ==  first_group | time == second_group)
data <- tidyr::pivot_longer(wide_data, names_to = ariable, cols = everything()) %>%
dplyr::filter(time ==  first_group | time == second_group)
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(time ==  first_group | time == second_group)
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
variable <- "time"
variable <- "test_score"
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(variable ==  first_group | variable == second_group)
data
variable
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(.[[variable]] ==  first_group | .[[variable]] == second_group)
data
grouping_variable
variable
colnames(data) <- c(grouping_variable, variable)
if(!("time" %in% colnames(wide_data))){
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(.[[variable]] ==  first_group | .[[variable]] == second_group)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
split_dfs
grouping_variable
data
grouping_variable
data$time
second_group
first_group
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(.[[variable]] ==  first_group | .[[variable]] == second_group)
View(data)
grouping_variable
if(!(grouping_variable %in% colnames(wide_data))){
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(.[[variable]] ==  first_group | .[[variable]] == second_group)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
data
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
variable
second_group
first_group
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(.[[variable]] ==  first_group | .[[variable]] == second_group)
data
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(as.factor(.[[variable]]) ==  first_group | as.factor(.[[variable]]) == second_group)
data
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
data <- tidyr::pivot_longer(wide_data, names_to = variable, cols = everything()) %>%
dplyr::filter(.[[variable]] %in% c(first_group, second_group))
data
first_group
second_group
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
# Data has to be in long format.
dependent_qq_plot <- function(data, variable, grouping_variable, first_group, second_group) {
if(!(grouping_variable %in% colnames(data))){
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- first_group_df[[1]][[variable]] - second_group_df[[1]][[variable]]
if(first_group_df[[1]][[grouping_variable]][[1]] != first_group){
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if(second_group_df[[1]][[grouping_variable]][[1]] != second_group){
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
# Long example
dependent_qq_plot(wide_data, "weight", "time", "before", "after")
# Long example
dependent_qq_plot(wide_data, "weight", "time", "before", "after")
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
# Data has to be in long format.
dependent_qq_plot <- function(data, variable, grouping_variable, first_group, second_group) {
if(!(grouping_variable %in% colnames(data))){
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% c(first_group, second_group))
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
first_group_df <-
ifelse(split_dfs[[1]][[grouping_variable]][[1]] == first_group,
split_dfs[1], split_dfs[2]
)
second_group_df <-
ifelse(split_dfs[[2]][[grouping_variable]][[1]] == second_group,
split_dfs[2], split_dfs[1]
)
diff <- first_group_df[[1]][[variable]] - second_group_df[[1]][[variable]]
if(first_group_df[[1]][[grouping_variable]][[1]] != first_group){
stop(cat(first_group, "is not a valid level of the grouping variable"))
}
if(second_group_df[[1]][[grouping_variable]][[1]] != second_group){
stop(cat(second_group, "is not a valid level of the grouping variable"))
}
data.frame(diff) %>%
ggplot2::ggplot(
.,
aes(sample = diff)
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ",
variable, " in order of: ",
first_group, "-", second_group
))
}
# Long example
dependent_qq_plot(wide_data, "weight", "time", "before", "after")
tidyr::pivot_longer(wide_data, names_to = variable, cols = everything())
grouping_variable
dependent_qq_plot(wide_data, "weight", "time", "before", "after")
dependent_qq_plot(drop_na(penguins), "bill_length_mm", "sex", "female", "male")
# Wide example
dependent_qq_plot(drop_na(penguins), "bill_depth_mm", "sex", "female", "male")
wide_data
# Long example
dependent_qq_plot(wide_data, "weight", "time", "before_test_score", "after_after_test_score")
library(tidyverse)
library(palmerpenguins)
wide_data <- data.frame(before_weight = rnorm(50, 0, 1),
after_weight = rnorm(50,1,1))
wide_data
long_data <- data.frame(time_point = rep(c("before", "after"), each = 50),
weight = c(rnorm(50, 0, 1), rnorm(50,1,1)))
long_data
# Long example
dependent_qq_plot(wide_data, variable = "weight", grouping_variabl = "time",
first_group = "before_weight",
second_group = "after_weight")
# Wide example
dependent_qq_plot(wide_data, variable = "weight", grouping_variable = "time",
first_group = "before_weight",
second_group = "after_weight")
dependent_qq_plot(long_data, variable = "weight", grouping_variable = "time_point",
first_group = "before", second_group = "after")
# Wide example
# variable and grouping_variable arguments are arbitrary, altough
dependent_qq_plot(wide_data, variable = "weight", grouping_variable = "time",
first_group = "before_weight",
second_group = "after_weight")
styler:::style_active_file()
wide_data
colnames(wide_data) <- c("first_group", "second_group")
# Long example
dependent_qq_plot(long_data, variable = "weight", grouping_variable = "time_point",
first_group = "before", second_group = "after")
wide_data
wide_data
!("time" %in% colnames(wide_data))
data <- tidyr::pivot_longer(wide_data, names_to = "time", cols = everything())
data
long_data
dependent_qq_plot(long_data, variable = "weight",
grouping_variable = "time_point",
first_group = "before",
after_group = "after")
dependent_qq_plot(long_data, variable = "weight",
grouping_variable = "time_point",
first_group = "before",
second_group = "after")
wide_data
wide_data <- data.frame(before_weight = rnorm(50, 0, 1),
after_weight = rnorm(50,1,1))
wide_data <- data.frame(before_weight = rnorm(50, 0, 1),
after_weight = rnorm(50,1,1),
random_var = runif(50))
wide_data
dependent_qq_plot(wide_data, variable = "weight",
grouping_variable = "time_point",
first_group = "before_weight",
second_group = "after_weight")
independent_qq_plot <- function(data, variable, grouping_variable, ...) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% ...)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
qq_1 <-
ggplot2::ggplot(
split_dfs[[1]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[1]]
))
qq_2 <-
ggplot2::ggplot(
split_dfs[[2]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[2]]
))
ggpubr::ggarrange(qq_1, qq_2)
}
grouping_variable
wide_data
# For wide_data, supply column names of groups in a vector
independent_qq_plot <- function(data, variable, grouping_variable, ...) {
if (!(grouping_variable %in% colnames(data))) {
data <- tidyr::pivot_longer(data, names_to = grouping_variable, cols = everything()) %>%
dplyr::filter(.[[grouping_variable]] %in% ...)
colnames(data) <- c(grouping_variable, variable)
} else {
data <- data
}
split_dfs <- data %>%
dplyr::group_split(get(grouping_variable))
levels_vector <-
sapply(split_dfs, function(x) (x[[grouping_variable]])[[1]]) %>%
as.character()
if (length(split_dfs) < 2) {
stop(cat("There are less than two levels to the grouping variable, it is", levels_vector, "\n"))
} else if (length(split_dfs) > 2) {
stop(cat("There are more than two levels to the grouping variable, they are:", levels_vector, "\n"))
}
qq_1 <-
ggplot2::ggplot(
split_dfs[[1]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[1]]
))
qq_2 <-
ggplot2::ggplot(
split_dfs[[2]],
aes(sample = get(variable))
) +
ggplot2::stat_qq_line(
linetype = "dashed",
color = "black", linewidth = 1
) +
ggplot2::stat_qq(color = "#6A6C6E") +
ggplot2::theme_bw() +
ggplot2::labs(x = "Theoretical", y = "Sample", title = paste0(
"QQ Plot for ", variable, ": ",
grouping_variable, "=", levels_vector[[2]]
))
ggpubr::ggarrange(qq_1, qq_2)
}
wide_data
independent_qq_plot(wide_data, "weight", "time", c("before_weight", after_weight))
independent_qq_plot(wide_data, "weight", "time", c("before_weight", "after_weight"))
long_data
independent_qq_plot(long_data, "weight", "time_point")
independent_qq_plot(drop_na(penguins), "bill_depth_mm", "sex")
dependent_qq_plot(drop_na(penguins), "bill_depth_mm", "sex", "male", "female")
